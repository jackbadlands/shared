local function clonetable(t)
	if type(t) ~= "table" then
		error("clonetable(): arg #1 not a table: "..tostring(t))
	end
	local out = {}
	for i, v in pairs(t) do
		if type(v) == "table" then
			out[i] = clonetable(v)
		else
			out[i] = v
		end
	end
	return out
end

-- Tree sentinel node
local Sentinel = {}
	Sentinel.left = NIL
	Sentinel.right = NIL
	Sentinel.parent = nil
	Sentinel.color = "BLACK"
	Sentinel.data = nil
local NIL = Sentinel

-- Tree prototype -----------------------------

local TreeProto = {}

-- Default compare functions
function TreeProto.compLT(a,b)
	return a < b
end
function TreeProto.compEQ(a,b)
	return a == b
end

function TreeProto.rotateLeft(tree, x)

	local y = x.right

	-- establish x->right link
	x.right = y.left
	if (y.left ~= tree.NIL) then
		y.left.parent = x
	end

	-- establish y->parent link
	if (y ~= tree.NIL) then
		y.parent = x.parent
	end
	if (x.parent) then
		if (x == x.parent.left) then
			x.parent.left = y
		else
			x.parent.right = y
		end
	else
		tree.root = y
	end

	-- link x and y
	y.left = x
	if (x ~= tree.NIL) then
		x.parent = y
	end
end

function TreeProto.rotateRight(tree, x)

	local y = x.left

	-- establish x->left link
	x.left = y.right
	if (y.right ~= tree.NIL) then
		y.right.parent = x
	end

	-- establish y->parent link
	if (y ~= tree.NIL) then
		y.parent = x.parent
	end
	if (x.parent) then
		if (x == x.parent.right) then
			x.parent.right = y
		else
			x.parent.left = y
		end
	else
		tree.root = y
	end

	-- link x and y
	y.right = x
	if (x ~= tree.NIL) then
		x.parent = y
	end
end

function TreeProto.insertFixup(tree, x)

	--[[
	*************************************
	*  maintain Red-Black tree balance  *
	*  after inserting node x           *
	************************************* ]]

	-- check Red-Black properties
	while (x ~= tree.root and x.parent.color == "RED") do
		-- /* we have a violation */
		if (x.parent == x.parent.parent.left) then
			local y = x.parent.parent.right
			if (y.color == "RED") then

				-- uncle is RED
				x.parent.color = "BLACK"
				y.color = "BLACK"
				x.parent.parent.color = "RED"
				x = x.parent.parent
			else

				-- uncle is BLACK
				if (x == x.parent.right) then
						-- /* make x a left child */
						x = x.parent
						tree:rotateLeft(x)
				end

				-- recolor and rotate
				x.parent.color = "BLACK"
				x.parent.parent.color = "RED"
				tree:rotateRight(x.parent.parent)
			end
		else

			-- mirror image of above code
			local y = x.parent.parent.left
			if (y.color == "RED") then

				-- uncle is RED
				x.parent.color = "BLACK"
				y.color = "BLACK"
				x.parent.parent.color = "RED"
				x = x.parent.parent
			else

				-- uncle is BLACK
				if (x == x.parent.left) then
						x = x.parent
						tree:rotateRight(x)
				end
				x.parent.color = "BLACK"
				x.parent.parent.color = "RED"
				tree:rotateLeft(x.parent.parent)
			end
		end
	end
	tree.root.color = "BLACK"
end

function TreeProto.insertNode(tree, data)
	local current, parent, x

	--[[
	***********************************************
	*  allocate node for data and insert in tree  *
	*********************************************** ]]

	-- find where node belongs
	current = tree.root
	parent = nil
	while (current ~= tree.NIL) do
		if (tree.compEQ(data, current.data)) then
			return current
		end
		parent = current
		if tree.compLT(data, current.data) then
			current = current.left
		else
			current = current.right
		end
	end

	-- setup new node
	x = {}
	x.data = data
	x.parent = parent
	x.left = tree.NIL
	x.right = tree.NIL
	x.color = "RED"

	-- insert node in tree
	if parent then
		if (tree.compLT(data, parent.data)) then
			parent.left = x
		else
			parent.right = x
		end
	else
		tree.root = x;
	end

	tree:insertFixup(x)
	return x
end

function TreeProto.deleteFixup(tree, x)

	--[[
	*************************************
	*  maintain Red-Black tree balance  *
	*  after deleting node x            *
	************************************* ]]

	while (x ~= tree.root and x.color == "BLACK") do
		if (x == x.parent.left) then
			local w = x.parent.right
			if (w.color == "RED") then
				w.color = "BLACK"
				x.parent.color = "RED"
				tree:rotateLeft(x.parent)
				w = x.parent.right
			end
			if (w.left.color == "BLACK" and w.right.color == "BLACK") then
				w.color = "RED"
				x = x.parent
			else
				if (w.right.color == "BLACK") then
					w.left.color = "BLACK"
					w.color = "RED"
					tree:rotateRight(w)
					w = x.parent.right
				end
				w.color = x.parent.color
				x.parent.color = "BLACK"
				w.right.color = "BLACK"
				tree:rotateLeft(x.parent)
				x = tree.root
			end
		else
			local w = x.parent.left
			if (w.color == "RED") then
				w.color = "BLACK"
				x.parent.color = "RED"
				tree:rotateRight(x.parent)
				w = x.parent.left
			end
			if (w.right.color == "BLACK" and w.left.color == "BLACK") then
				w.color = "RED"
				x = x.parent
			else
				if (w.left.color == "BLACK") then
					w.right.color = "BLACK"
					w.color = "RED"
					tree:rotateLeft(w)
					w = x.parent.left
				end
				w.color = x.parent.color;
				x.parent.color = "BLACK"
				w.left.color = "BLACK"
				tree:rotateRight(x.parent)
				x = tree.root
			end
		end
	end
	x.color = "BLACK"
end

function TreeProto.deleteNode(tree, z)
	local x, y

	--[[
	*****************************
	*  delete node z from tree  *
	***************************** ]]

	if (not z or z == tree.NIL) then
		return
	end

	if (z.left == tree.NIL or z.right == tree.NIL) then
		-- y has a NIL node as a child
		y = z
	else
		-- find tree successor with a NIL node as a child
		y = z.right
		while (y.left ~= tree.NIL) do
			y = y.left
		end
	end

	-- x is y's only child
	if (y.left ~= tree.NIL) then
		x = y.left
	else
		x = y.right
	end

	-- remove y from the parent chain
	x.parent = y.parent
	if (y.parent) then
		if (y == y.parent.left) then
			y.parent.left = x
		else
			y.parent.right = x
		end
	else
		tree.root = x
	end

	if (y ~= z) then
		z.data = y.data
	end


	if (y.color == "BLACK") then
		tree:deleteFixup(x)
	end

	-- free(y)
end


function TreeProto.findNode(tree, data)

	--[[
	*******************************
	*  find node containing data  *
	******************************* ]]

	local current = tree.root
	while(current ~= tree.NIL) do
		if tree.compEQ(data, current.data) then
			return current
		else
			if tree.compLT(data, current.data) then
				current = current.left
			else
				current = current.right
			end
		end
	end
	return nil
end

-- Public API ----------------------------------

local public = {}

function public.new(cfg_t)
	local new = clonetable(TreeProto)
	new.NIL = clonetable(NIL)
	new.root = new.NIL
	cfg_t = cfg_t or {}
	if type(cfg_t.compLT) == "function" then
		new.compLT = cfg_t.compLT
	end
	if type(cfg_t.compEQ) == "function" then
		new.compEQ = cfg_t.compEQ
	end
	return new
end

return public

